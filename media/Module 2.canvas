{
	"nodes":[
		{"id":"6fbef8701c879109","x":-2742,"y":587,"width":2281,"height":1494,"color":"#8c5454","type":"group","label":"DES"},
		{"id":"b55d230553f0d1f9","type":"group","x":-2800,"y":-1120,"width":1335,"height":1601,"label":"Stream Cipher Mode"},
		{"id":"fd25dc9e76d15db5","type":"group","x":-160,"y":-760,"width":1060,"height":705,"color":"2","label":"Algorithm Types"},
		{"id":"77f6e3698abde48c","type":"group","x":-1307,"y":-900,"width":1147,"height":493,"color":"#9f7f7f","label":"BLock Cipher Mode"},
		{"id":"317e17763dc3c741","type":"text","text":"# Module 2","x":-94,"y":-60,"width":200,"height":60},
		{"id":"92f8b11e912e378b","type":"text","text":"# Encryption Algorithms","x":-184,"y":160,"width":379,"height":80},
		{"id":"79167ba8fb1e017d","type":"text","text":"### Feistel Block Cipher\n\n- **design model** from which many ciphers are derived\n\t- adapted Shannon's S-P network in an easily inverted structure\n- input block is divided into two parts, L and R\n- now, R remains untouched throughout all the rounds\n\t- L on the other hand is involved based on the encryption key and R\n- the right part is initially passed through an encryption function(f) which takes two inputs K and R\n\t- thereafter the output is XORed with L and the output is passed as the input of R for the round\n\t> in practical applications fo Feistel, instead of entire keys for a round, subkeys are used each round\n\t- whereas the initial value of R when it was divided, is used to be swapped as the input of L for the next round\n- above steps after division of PT constitute one round\n- once all rounds are completed, the output L and R are concatenated to produce ciphertext","x":-354,"y":320,"width":719,"height":524},
		{"id":"55265b15b0baf39a","type":"text","text":"![[Pasted image 20231009181924.png]]","x":560,"y":360,"width":320,"height":444},
		{"id":"3f47006f1a72aaf2","type":"text","text":"# Algorithm Modes\n\n- consists of techniques that specify how a block cipher operating on fixed size blocks of data, should be used to encrypt or decrypt data of arbitrary sizes\n- different modes provide different functionalities and security properties\n- combination of series of basic algorithm steps on block cipher and some kind feedback from the previous steps","x":-1063,"y":-189,"width":500,"height":275},
		{"id":"a7c1746350e2a8a5","type":"text","text":"### Block Cipher\n- Processes the input **one block**(128 or 256 bits) of elements **at a time** \n- Produces an output block for each input block \n- Uses **longer keys**: 128, 192, or 256 bits, which can be **reused**\n- **slower** compared to stream\n- applications where **data is encrypted in discrete blocks, and padding may be required** for data being encrypted, like **file encryption, disk encryption and communication protocols** like TLS/SSL\n- More common\n- eg: AES, DES, 3DES","x":446,"y":-740,"width":434,"height":410},
		{"id":"bd0c76fdeaab2826","type":"text","text":"# Algorithm Types","x":203,"y":-192,"width":292,"height":80},
		{"id":"7913d62151755ec0","type":"text","text":"### Stream Cipher\n- Processes the input elements **continuously** \n- Produces output one element at a time by **encrypting one bit/byte at a time** in a continuous stream\n- Primary advantage is that they are almost always **faster** and use **far less code** \n- They generate a pseudorandom keystream, which is then combined (usually by XOR operation) with the plaintext to produce the ciphertext.\n- keys are **shorter**: 128 bits\n- applications where continuous and fast flow of encrypted data required, like **internet** or **satellite communication**\n- eg: RC4, Salsa20","x":-140,"y":-740,"width":488,"height":410},
		{"id":"c7070604854457eb","type":"text","text":"### ECB - Electronic Codebook\n\n- easiest mode of functioning\n- PT divided into blocks of 64 bits each\n- has the name codebook, because for a given key, every block of b-bits, has a unique ciphertext\n- ==problem arises when there is repetition of the same block, cause for the same key, ciphertext will also be the same==\n- each block is encrypted and decrypted independently\n- each block is a value which is substituted like in a codebook\n- hence, not good for longer messages\n- there can be the problem that some messages only change a little\n- weakness arises cause encrypted blocks are independent from each other","x":-1287,"y":-880,"width":495,"height":453},
		{"id":"7cd6575c82de5de7","type":"text","text":"### Cipher Block Chaining\n\n- here, input to the encryption algorithm is the XOR of the current PT block and previous CT block\n\t- same key is used for each block\n- chaining of the PT blocks with each other results in input of encryption algorithm for each PT block has no relationship with the PT block, hence overcoming the difficulty of ECB, where repeating patterns of bits don't expose the algorithm\n- Initialization Vector (IV) is used as the CT of previous block for the first block\n- essential to protect the IV along with the key. IV can be sent using ECB\n- cipher text depends on all PT blocks, hence change in msg will result in change in all CT blocks and also PT blocks\n- ==padding could be required for last block of data==\n- ==IV is a liability that needs to be protected==","x":-760,"y":-880,"width":580,"height":453},
		{"id":"5e4bc7d469a21487","type":"text","text":"**steps:**\n- encrypt the IV\n- first j bits of encrypted IV and PT are XORed to give CT\n- thereafter the bits of PT are shifted to the left, and the first j bits of CT  are placed on the rightmost side of the remaining bits of the encrypted IV and the process continues until all the bits of PT are encrypted. \n- if PT doesnt have required number of bits according to the unit size, PT is padded","x":-2685,"y":-1100,"width":483,"height":278},
		{"id":"baacc6b4bfc13500","type":"text","text":" **advantages:**\n- **self synchronizing**, so it doesnt require separate mechanism to synchronize between sender and receiver\n\t- can be used where data that is arriving can be out of order, lost or even corrupted\n- encryption of stream of bits which helps in **real-time applications**\n- **encryption at the bit-level**, allowing for greater flexibility in handling data of different sizes\n- error in ciphertext affects only the corresponding bit in the decrypted plaintext. it doesnt **propagate over the entire block**","x":-2751,"y":-780,"width":548,"height":333},
		{"id":"ce54a649778ad5ca","type":"text","text":"### Cipher Feedback Mode\n\n- block cipher is converted into stream cipher by using the cipher feeback, allowing for continuous stream of bits or bytes\n> stream cipher is used where immediately transmitted data needs to sent in a secure manner\n- max size of the units in which the blocks are divided is 8","x":-1985,"y":-747,"width":500,"height":267},
		{"id":"4a0569744569677d","type":"text","text":"\n- **limitations:**\n\t- only provides confidentiality not **data integrity or authenticity** which is necessary for secure communication\n\t- **IV has to be protected**. it should be unique for each encryption and unpredictable\n\t- may not be as **efficient** as block-level processing since it operates at the bit-level\n\t- block size must match the desired bit-level **granularity**","x":-2780,"y":-380,"width":578,"height":240},
		{"id":"233a2ea43fcb1698","type":"text","text":"- **Advantages**\n\t- bit error doesnt propagate throughout the CT\n\t- error in one bit wont affect the whole message","x":-2632,"y":-84,"width":377,"height":176},
		{"id":"cb45a5c53b847be7","type":"text","text":"### Counter Mode (CTR)\n- uses a counter that is used to encrypt the plaintext\n- the size of counter block is the same as the PT block","x":-1817,"y":146,"width":332,"height":158},
		{"id":"037b56b8e7f8cc78","type":"text","text":"**Advantages**\n- encryption and decryption process can be done in parallel on multiple text blocks\n- faster execution speed\n\t- multiprocessing helps in reducing execution speed\n- error does not propagate throughout the msg\n\n- **Limitation**\n\t- key management\n\t- limited applicability","x":-2459,"y":148,"width":474,"height":313},
		{"id":"6c17b3fb1af34a0d","type":"text","text":"### Output Feedback\n\n- very similar to CFB, with the exception that \n\t- generated CT is not being used to encrypt the PT bits\n\t- instead, the encrypted IV which was used for the first iteration, is used for the remaining iterations , and the IV is encrypted again before each iteration\n- **Limitation**\n\t- attacker can change both the checksum and the CT and remain undetected","x":-2016,"y":-197,"width":531,"height":289},
		{"id":"658900ade0638cc5","type":"text","text":"### Data Encryption Standard\n\n- **Rounds**: 16\n- **Block size**: 64 bit\n- **Key size**: 64 bit (becomes 56 bit effectively\n\t- every 8th bit from 64 bit key is discarded\n\t- these bits can be used for parity checking to ensure the key doesnt contain any errors\n- Before any of the rounds, Initial Permutation takes place\n\t- it produces two halves of the PT, LPT and RPT\n- This LPT go through 16 rounds of encryption process\n- LPT, RPT are then joined and then Final Permutation is performed, producing 64 bit cipher text\n- ![[Pasted image 20231009205358.png]]","x":-1200,"y":607,"width":719,"height":660},
		{"id":"6ca814fd19e5264f","type":"text","text":"**I. Key Transformation**\n\n- 56 bit key that is being used is converted to 48 bit key using key transformation\n- for this, 56 bit key is divided into **2 halves** of 28 bits\n- thereafter for both the halves, the bits are shifted to the left by one or two positions depending on the round number\n\t- rounds 1,2,9,16 - shift is by **one** position\n\t- other rounds, the shift is by **two** positions\n- after the circular shift, using the **Permutation Choice 2** table, 48 bit key is generated as described in the table(**Compression Permutation**)\n\t- the circular shit performed in the prior step, ensures that different subkey is generated every time","x":-2417,"y":607,"width":600,"height":360},
		{"id":"fe364d85288d0295","type":"text","text":"**P-Box Permutation**\n\nSimple permutation of the 32 bits generated by the S-Box Substitution","x":-1200,"y":1320,"width":430,"height":107},
		{"id":"ac3a092163444072","x":-1629,"y":1564,"width":314,"height":195,"type":"text","text":"**Final Permutation**\n\nSimple Permutation performed on output of all the 16 rounds"},
		{"id":"ecf85edf3aa43588","type":"text","text":"**Rounds**\n\n1. Key Transforamtion\n2. Expansion Permutation\n3. S-Box Substitution\n4. P-Box Permutation\n5. XOR and Swap","x":-1624,"y":1267,"width":304,"height":200},
		{"id":"0da83b3fe7adf1f0","type":"text","text":"**II. Expansion Permutation**\n\n> ***this is where must remember that DES is based on Feistel. so the expansion permutation and other processes only take place on the RPT. LPT only comes in the picture when we have to XOR with the processed RPT***\n\n- now the 32 bit RPT is expanded from 32 bits to 48 bits to match the size of subkey to be used.\n\t- in addition to that, the bits are also going to be permuted hence giving the name expansion permutation\n- the 32 bit RPT is divided into 8 blocks of 4 bits each, and 2 additional bits are added to each block, making it 6 bits each block. \n- method of adding bits is as follows\n  ![[Pasted image 20231009214654.png]]\n- thereafter, the output 48 bits is XORed with the 48 bits subkey ","x":-2577,"y":992,"width":760,"height":600},
		{"id":"8991d6b1e08566cb","type":"text","text":"**S-Box Permutation**\n\n- takes the 48 bit output from the Expansion Permutation and produces 32 bit output through substitution\n- this takes place using 8 substitution boxes\n\t- these boxes have 6 bit input and 4 bit output\n\t- think of each box as a table(so 8 such tables) with 4 rows (0 to 3) and 16 columns (0 to 15) \n\t\t- at the intersection of each row and column, a 4 bit number is present which will be the output of that box\n\t- now, from the 6 bit number, the first and last bit are combined to give the row number in binary, and the remaining 4 bits are used to give the column number in binary\n\t\t- therefore (row, column) => ( [b1,b6], [b2,b3,b4,b5] )\n\t\t- using the indices obtained, we can pinpoint the element from the respective S-Box \n\t\t\t- the value present, depends on the contents of the S-Box which is fixed\n- output from each of these 8 boxes is then combined for P-Box Permutation and ","x":-2697,"y":1661,"width":880,"height":400},
		{"id":"62e27a49057d0594","type":"text","text":"**XOR and Swap**\n\n- Output of the P-Box Permutation and LPT are XORed together\n- output becomes the RPT for the next round, and the initial value of RPT becomes the new LPT","x":-1080,"y":1467,"width":395,"height":194},
		{"id":"3afd94c8b1b23e48","type":"text","text":"**Initial Permutation**\n\n- Basically, in IP, the bits of the PT block are permuted randomly by making use of an IP table\n- thereafter the permuted text block is divided into the two halves","x":-1624,"y":696,"width":304,"height":271}
	],
	"edges":[
		{"id":"cce581b892502868","fromNode":"317e17763dc3c741","fromSide":"top","toNode":"bd0c76fdeaab2826","toSide":"left"},
		{"id":"b4e59abd94b9ac72","fromNode":"bd0c76fdeaab2826","fromSide":"top","toNode":"7913d62151755ec0","toSide":"bottom"},
		{"id":"dac96c22cf4947d8","fromNode":"bd0c76fdeaab2826","fromSide":"top","toNode":"a7c1746350e2a8a5","toSide":"bottom"},
		{"id":"2620ca9e3443fc7d","fromNode":"317e17763dc3c741","fromSide":"left","toNode":"3f47006f1a72aaf2","toSide":"right"},
		{"id":"e8feefa72e8164e9","fromNode":"3f47006f1a72aaf2","fromSide":"top","toNode":"c7070604854457eb","toSide":"bottom"},
		{"id":"1a1285e12c20e11a","fromNode":"3f47006f1a72aaf2","fromSide":"top","toNode":"7cd6575c82de5de7","toSide":"bottom"},
		{"id":"69b1f534a55288db","fromNode":"3f47006f1a72aaf2","fromSide":"left","toNode":"ce54a649778ad5ca","toSide":"right"},
		{"id":"b414195e89e75514","fromNode":"ce54a649778ad5ca","fromSide":"left","toNode":"5e4bc7d469a21487","toSide":"right"},
		{"id":"eafbfea061c162a3","fromNode":"ce54a649778ad5ca","fromSide":"left","toNode":"baacc6b4bfc13500","toSide":"right"},
		{"id":"2f8e9cacc5457dc1","fromNode":"ce54a649778ad5ca","fromSide":"left","toNode":"4a0569744569677d","toSide":"right"},
		{"id":"a74e94929f87d8a8","fromNode":"3f47006f1a72aaf2","fromSide":"left","toNode":"6c17b3fb1af34a0d","toSide":"right"},
		{"id":"23e042f73d3e7c4b","fromNode":"6c17b3fb1af34a0d","fromSide":"left","toNode":"233a2ea43fcb1698","toSide":"right"},
		{"id":"1456c9d1e55f027d","fromNode":"3f47006f1a72aaf2","fromSide":"left","toNode":"cb45a5c53b847be7","toSide":"right"},
		{"id":"c16556c4e6346ac5","fromNode":"cb45a5c53b847be7","fromSide":"left","toNode":"037b56b8e7f8cc78","toSide":"right"},
		{"id":"68620ad67e53417f","fromNode":"317e17763dc3c741","fromSide":"bottom","toNode":"92f8b11e912e378b","toSide":"top"},
		{"id":"bf19c2555828d3da","fromNode":"92f8b11e912e378b","fromSide":"bottom","toNode":"79167ba8fb1e017d","toSide":"top"},
		{"id":"4a2318a565936d36","fromNode":"79167ba8fb1e017d","fromSide":"right","toNode":"55265b15b0baf39a","toSide":"left"},
		{"id":"6057d7bc08829c5b","fromNode":"79167ba8fb1e017d","fromSide":"left","toNode":"658900ade0638cc5","toSide":"right"},
		{"id":"9cf207644ee614aa","fromNode":"658900ade0638cc5","fromSide":"left","toNode":"3afd94c8b1b23e48","toSide":"right"},
		{"id":"a63a42eccdc3a47f","fromNode":"3afd94c8b1b23e48","fromSide":"bottom","toNode":"ecf85edf3aa43588","toSide":"top"},
		{"id":"8824467b176c80e6","fromNode":"ecf85edf3aa43588","fromSide":"left","toNode":"6ca814fd19e5264f","toSide":"right"},
		{"id":"c0880e9f5ee17513","fromNode":"ecf85edf3aa43588","fromSide":"left","toNode":"0da83b3fe7adf1f0","toSide":"right"},
		{"id":"97fa3ee012f22ae9","fromNode":"ecf85edf3aa43588","fromSide":"left","toNode":"8991d6b1e08566cb","toSide":"right"},
		{"id":"1f1c5b02dfbbd6ed","fromNode":"ecf85edf3aa43588","fromSide":"right","toNode":"fe364d85288d0295","toSide":"left"},
		{"id":"3df14297a125f85b","fromNode":"ecf85edf3aa43588","fromSide":"right","toNode":"62e27a49057d0594","toSide":"left"},
		{"id":"36165dcf60eb9a36","fromNode":"ecf85edf3aa43588","fromSide":"bottom","toNode":"ac3a092163444072","toSide":"top"}
	]
}